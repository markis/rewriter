from dataclasses import dataclass
from enum import Enum

class TargetVersion(Enum):
    PY33 = ...
    PY34 = ...
    PY35 = ...
    PY36 = ...
    PY37 = ...
    PY38 = ...
    PY39 = ...
    PY310 = ...
    PY311 = ...

class Preview(Enum):
    """Individual preview style features."""

    hex_codes_in_unicode_sequences = ...
    prefer_splitting_right_hand_side_of_assignments = ...
    string_processing = ...
    parenthesize_conditional_expressions = ...
    skip_magic_trailing_comma_in_subscript = ...
    wrap_long_dict_values_in_parens = ...
    wrap_multiple_context_managers_in_parens = ...

@dataclass
class Mode:
    target_versions: set[TargetVersion] = ...
    line_length: int = ...
    string_normalization: bool = ...
    is_pyi: bool = ...
    is_ipynb: bool = ...
    skip_source_first_line: bool = ...
    magic_trailing_comma: bool = ...
    experimental_string_processing: bool = ...
    python_cell_magics: set[str] = ...
    preview: bool = ...
    def __post_init__(self) -> None: ...
    def __contains__(self, feature: Preview) -> bool:
        """
        Provide `Preview.FEATURE in Mode` syntax that mirrors the ``preview`` flag.

        The argument is not checked and features are not differentiated.
        They only exist to make development easier by clarifying intent.
        """
        ...
    def get_cache_key(self) -> str: ...
